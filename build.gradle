plugins {
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'jacoco'
}

group = 'com.gmail.arthurstrokov'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('springAiVersion', "1.0.0")
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Monitoring / metrics
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // External libraries
    implementation 'org.telegram:telegrambots-springboot-longpolling-starter:9.2.0'
    implementation 'org.telegram:telegrambots-client:9.2.0'
    implementation 'com.google.code.gson:gson:2.12.0'

    // Spring AI
    implementation 'org.springframework.ai:spring-ai-starter-mcp-server-webmvc'
    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'

    // Lombok (compile-time code generation)
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Lombok for tests (optional)
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.wiremock.integrations:wiremock-spring-boot:3.10.6'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

test {
    systemProperty('spring.profiles.active', 'test')
    systemProperty('file.encoding', 'utf-8')
    systemProperty('user.timezone', 'Europe/Moscow')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.named('bootJar') {
    archiveFileName = "weather-bot.jar"
}
